#!/usr/bin/env ruby
require 'json'
require 'pp'

# require 'coderay'
require 'io/console'
HEIGHT, WIDTH = $stdin.winsize
begin
  filename = ARGV[0]
  if filename != 'js' && filename != 'browser'
    $stderr.puts "First argument to this script must be the filename of either js or browser"
    exit 1
  end
  filename = File.join __dir__, "#{filename}.json"
  API = JSON.parse(File.read(filename), symbolize_names: true)
end

class String
  def indent
    gsub /^/, "  "
  end
end

def self.HEADER1(header, experimental:false)
  line = "-- #{header}#{experimental ? " (experimental)" : ""} ".ljust(WIDTH, "-")
  puts "\n\e[1;37;#{experimental ? 41 : 45}m#{line}\e[0m"
end

def self.HEADER2(header)
  puts "\n\e[44;37m  #{header}  \e[0m"
end

def self.show_paramable(obj, show_desc: false)
  obj          = obj.dup
  name         = obj.delete(:name) || raise("No name in #{obj.inspect}")
  description  = obj.delete(:description) || ""
  parameters   = obj.delete(:parameters) || []
  returns      = obj.delete(:returns)
  experimental = obj.delete(:experimental)
  redirect     = obj.delete(:redirect)
  raise "Unexpected keys: #{obj.keys.inspect}" unless obj.empty?

  pre_name = experimental ? "\e[91mexperimental\e[0m " : ""
  params = parameters.map do |name:,**rest|
    type = rest[:$ref]
    "#{type}#{" " if type}\e[96m#{name}\e[0m"
  end
  pre_params = ""
  if params.join(", ").gsub(/\e\[.*?m/,"").size > WIDTH*2/3
    pre_params, params = "\n", params.map { |param| "  #{param},\n" }.join
  else
    params = params.join(", ")
  end
  puts "#{pre_name}\e[95m#{name}\e[0m(#{pre_params}#{params})".indent
  puts description.indent.indent if show_desc && description
end

API.fetch(:domains).map do |domain|
  next if domain[:deprecated]
  name = domain.fetch(:domain)

  HEADER1 name, experimental: domain[:experimental]
  puts domain[:description] if domain[:description]

  HEADER2 "COMMANDS (#{name})"
  domain.fetch(:commands).each { |cmd| show_paramable cmd }

  HEADER2 "EVENTS (#{name})"
  domain.fetch(:events, []).each { |event| show_paramable event, show_desc: true }

  # dependencies
  # types
end
